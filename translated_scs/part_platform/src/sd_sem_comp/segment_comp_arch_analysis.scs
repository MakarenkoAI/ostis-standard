.segment_comp_arch_analysis = [*
.system_element_118
=> nrel_inclusion: [*

	.system_element_121
	=> nrel_note: [<p>Для того, чтобы преодолеть недостатки существующих архитектур вычислительных систем, включая фон-Неймановскую, было предложено множество различных подходов. При разработке новых архитектур и, в частности, архитектуры <i>ассоциативного семантического компьютера</i>, целесообразно в виде соответствующей онтологии выделить основные признаки классификации и соответствующие им классы (виды) архитектур вычислительных систем.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_122: 
			.system_element_81;
			.system_element_82;
			.system_element_83;
			.system_element_84;
			.system_element_85;
			.system_element_86
		;;
	*);;

	.system_element_3
	=> nrel_subdividing: {
		.system_element_123
		(*
			=> nrel_note: [<p>Архитектура, в которой все узлы (процессоры или машины) имеют доступ к глобальной оперативной памяти.</p>];;
			=> nrel_subdividing: {
				.system_element_124;
				.system_element_125;
				.system_element_126
				(*
					=> nrel_note: [<p>Примером такой архитектуры вычислительной системы является архитектура фон-Неймана.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*)
			};;
		*);
		.system_element_127
	};
	=> nrel_subdividing: {
		.system_element_128;
		.system_element_129
	};
	=> nrel_subdividing: {
		.system_element_130;
		.system_element_131
	};
	=> nrel_subdividing: {
		.system_element_132;
		.system_element_133
	};
	=> nrel_subdividing: {
		.system_element_134
		(*
			=> nrel_note: [<p>Ассоциативный характер доступа важен в системах, ориентированных на хранение данных со сложной структурой и ориентированных на масштабируемые (в том числе локальные) механизмы обработки информации.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_135
	};
	=> nrel_subdividing: {
		.system_element_136
		(*
			=> nrel_note: [<p>Примерами таких архитектур является большинство используемых на настоящий момент, включая архитектуру фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_87;;
			*);;
		*);
		.system_element_137
	};
	=> nrel_subdividing: {
		.system_element_138
		(*
			=> nrel_note: [<p>Большинство используемых на настоящий момент архитектур являются примерами архитектур данного класса, включая архитектуру фон-Неймана. Архитектуры с системой команд регистровой обработки данных удобны для задач управления данными как для систем обработки образов в задачах пользовательского интерфейса, так и для задач машинного обучения на основе аппарата линейной алгебры.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_139
	};
	=> nrel_subdividing: {
		.system_element_140
		(*
			=> nrel_note: [<p>Примерами применения такой архитектуры являются LISP-машины.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_88;
					.system_element_89;
					.system_element_90;
					.system_element_91;
					.system_element_92
				;;
			*);;
		*);
		.system_element_141
	};
	=> nrel_subdividing: {
		.system_element_142
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура вычислительной системы с поддержкой системы команд обработки списков и обобщенных строк. Эта модель позволяет эффективно производить операции не только над строками и списками, но и работать с отношениями вида "ключ-значение" с целью их интеграции в системы, управляемые знаниями. Программная реализация этой модели использует B-деревья.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_93;;
			*);;
		*);
		.system_element_143
	};
	=> nrel_subdividing: {
		.system_element_144
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура компьютера Leonhard. Этот компьютер ориентирован на обработку графовых и гиперграфовых структур различных видов, включая иерархические графы. Поддерживается представление в виде строк и списка смежных вершин, упорядоченных локальных списков инцидентных ребер, глобального упорядоченного списка инцидентных ребер.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_84;
					.system_element_85
				;;
			*);;
		*);
		.system_element_145
	};
	=> nrel_subdividing: {
		.system_element_146
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура компьютера Leonhard. Компьютер Leonhard поддерживает системы команд DISC (Discrete Instruction Set Computing). Система команд DISC включает следующие команды: создание целочисленного отношения со схемой, являющегося множеством объектов формального контекста (первым доменом бинарного отношения), тогда как соответствующим множеством образов является множество неотрицательных целых чисел (второй домен бинарного отношения); добавление пары в формальный контекст, содержащей добавляемый объект (ключ), который добавляется как кортеж через добавление элементов этого кортежа, вместе с целочисленным образом (значением) для этого объекта; получение следующего или предыдущего объекта в линейно (лексикографически) упорядоченным списке объектов; получение следующего большего или предыдущего меньшего объекта в линейно (лексикографически) упорядоченном списке объектов; получение минимального или максимального объекта в линейно (лексикографически) упорядоченном списке объектов; получение количества (мощности множества) образов для заданного объекта (кортежа-ключа); поиск пар по ключу; удаление пар; удаление всех пар формального контекста, включая объекты (ключи) и образы (значения); срез (подмножество) формальных контекстов контекста; объединение,пересечение и дополнение формальных контекстов. Для представления обрабатываемых данных используются B+-деревья. Другие архитектуры рассматривают реализацию операций обработки знаний, используя логическую модель представления знаний, LISP-структуры, обобщенные формальные языки. В последнем случае для развития системы команд обработки знаний рассматривается переход от обработки знаний к обработки метазнаний (на базе семантики становления актуального и неактуального), результатом которого является система метаопераций. Рассмотрение подобных архитектур важно для создания систем, управляемых знаниями.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_84;
					.system_element_85;
					.system_element_94;
					.system_element_88;
					.system_element_89;
					.system_element_93;
					.system_element_95;
					.system_element_95;
					.system_element_96
				;;
			*);;
		*);
		.system_element_147
	};
	=> nrel_subdividing: {
		.system_element_148
		(*
			=> nrel_note: [<p>Адаптивное распределение данных (включая как частный случай виртуальное адресное пространство) важно для целей управления данными (и знаниями) и задач виртуализации для многозадачных и многопользовательских систем, а также тесно связано с возможностями масштабируемости системы.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_149
	};
	=> nrel_subdividing: {
		.system_element_150
		(*
			=> nrel_note: [<p>Примером такой архитектуры является клеточный автомат. Элементарные клеточные (двоичные) автоматы разделяются на: быстро переходящие в однородное состояние (состояние только из нулей или единиц); быстро переходящие в устойчивое или циклическое состояние; остающиеся в хаотическом (случайном) состоянии; образующие как области с устойчивым или циклическим состоянием, так и области, в которых проявляются сложные взаимодействия элементов состояний, вплоть до Тьюринг-полных.Обработка информации с помощью клеточных автоматов позволяет строить вычислительные системы в том числе с перестраиваемой (в том числе фрактало-подобной) структурой на основе локальных параллельно (конкурентно) выполняемых несложных правил. Существуют разновидности клеточных автоматов, поддерживающих необратимые, обратимые, детерминированные, недетерминированные, специализированные, универсальные (в том числе Тьюринг-полные) вычисления. Работа клеточных автоматов напоминает волновые процессы распространяющиеся в среде элементов состояния клеточного автомата.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_86;;
			*);;
		*);
		.system_element_151
	};
	=> nrel_subdividing: {
		.system_element_152
		(*
			=> nrel_note: [<p>Большинство современных архитектур цифровых вычислительных систем, включая реализации архитектуры фон-Неймана, использует именно двоичное представление.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_153
	};
	=> nrel_subdividing: {
		.system_element_154
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_155
	};
	=> nrel_subdividing: {
		.system_element_156
		(*
			=> nrel_inclusion: .system_element_154;;
		*);
		.system_element_157
	};
	=> nrel_subdividing: {
		.system_element_158
		(*
			=> nrel_note: [<p>Архитектуры вычислительных систем с управлением от потока данных видятся более естественными при решении многих задач Искусственного интеллекта. Варианты таких архитектур рассмотрены в работах. Архитектуру клеточных автоматов можно рассматривать как архитектуру вычислительной системы с управлением от потока данных.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_159
	};
	=> nrel_subdividing: {
		.system_element_160
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_161
	};
	=> nrel_subdividing: {
		.system_element_162
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_163
	};
	=> nrel_subdividing: {
		.system_element_164
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_165
	};
	=> nrel_subdividing: {
		.system_element_166
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_167
	};
	=> nrel_subdividing: {
		.system_element_168
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_169
	};
	=> nrel_subdividing: {
		.system_element_170
		(*
			=> nrel_note: [<p>Примером такой архитектуры является архитектура фон-Неймана.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_171
	};
	=> nrel_subdividing: {
		.system_element_172
		(*
			=> nrel_note: [<p>Масштабируемость как свойство архитектуры важно для систем, ориентированных на обучение (самообучение) с целью решения широкого класса задач. Подобные архитектуры могут быть ориентированы на обработку структур знаний, интегрированных в единое смысловое пространство.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_97;
					.system_element_96
				;;
			*);;
		*);
		.system_element_173
	};
	=> nrel_subdividing: {
		.system_element_174
		(*
			=> nrel_note: [<p>Модель активной графовой памяти в архитектурах вычисленных систем важна для эффективной и согласованной (конвергентной) реализации параллельных процессов обработки знаний, включая механизмы возбуждения и торможения процессов обработки знаний. Модель активной графовой памяти ориентирована на реализацию представления знаний в смысловом пространстве и реализацию систем, управляемых знаниями.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_81;
					.system_element_98;
					.system_element_96
				;;
			*);;
		*);
		.system_element_175
	};
	=> nrel_subdividing: {
		.system_element_176
		(*
			=> nrel_note: [<p>Архитектуры вычислительных систем с поддержкой параллельной обработки знаний важны для эффективной реализации процессов обработки знаний, повышения производительности и масштабируемости систем обработки знаний, включая многоагентные системы в виде интеллектуальных компьютерных систем и коллективов интеллектуальных компьютерных систем.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: 
					.system_element_99;
					.system_element_95;
					.system_element_79
				;;
			*);;
		*);
		.system_element_177
	};
	=> nrel_subdividing: {
		.system_element_178
		(*
			=> nrel_note: [<p>Архитектуры с поддержкой моделей консистентности ориентированы на решение задач управления взаимодействующими процессами, включая их синхронизацию и синхронные и асинхронные механизмы исполнения алгоритмов обработки знаний. Целью поддержки последовательной модели консистентности является обеспечение существования глобальных состояний базы знаний как структур единого смыслового пространства в интеллектуальных компьютерных системах.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_180: .system_element_179;;
				=> .system_element_122: 
					.system_element_95;
					.system_element_100;
					.system_element_78;
					.system_element_80
				;;
			*);;
		*);
		.system_element_181
	};
	=> nrel_subdividing: {
		.system_element_182
		(*
			=> nrel_note: [<p>Архитектуры с поддержкой моделей консистентности ориентированы на решение задач управления взаимодействующими процессами, включая их синхронизацию и синхронные и асинхронные механизмы исполнения алгоритмов обработки знаний. Целью поддержки причинной модели консистентности является обеспечение интероперабельности и конвергенции в едином смысловом пространстве структур знаний агентов коллективов интеллектуальных компьютерных системах. Для обеспечение той или иной модели консистентности могут использоваться различные механизмы.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_180: .system_element_179;;
				=> .system_element_122: 
					.system_element_95;
					.system_element_78;
					.system_element_80
				;;
			*);;
		*);
		.system_element_183
	};
	=> nrel_subdividing: {
		.system_element_184
		(*
			=> nrel_note: [<p>Архитектуры вычислительных систем, обладающие асимметрией важны для эволюции многоагентных систем, интеллектуальных компьютерных систем и их коллективов, в которых асимметрия рассматривается в широком смысле, в том числе и как неоднородность таких систем или коллективов. Частным случаем случаем неоднородности является разнородность и гетерогенность архитектуры, которая позволяет реализовывать как интегрированное, так и гибридные модели обработки знаний, в рамках интеллектуальных компьютерных систем и их коллективов.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_185
	};;

	.system_element_4
	=> nrel_note: [<p>Для определения архитектуры <i>ассоциативных семантических компьютеров</i>, в соответствии с выявленными классами и признаками, а также выработанными общими принципами, лежащими в основе таких архитектур, необходимо в рамках соответствующего признакового пространства рассмотреть конкретные множества архитектур и провести сравнительный анализ элементов этих множеств с целью обоснования выбора (оптимальных) вариантов архитектуры <i>ассоциативных семантических компьютеров</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;
*];
=> nrel_comment: [<p>Завершили "Сегмент. Анализ существующих архитектур вычислительных систем"</p>];;

*];;